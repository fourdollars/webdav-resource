#!/bin/bash

set -euo pipefail

exec 3>&1
exec 1>&2
payload="$(cat <&0)"

domain=$(jq -r .source.domain <<< "$payload")
echo "machine $domain" > ~/.netrc
if [ "$(jq -r '.source | has("username")' <<< "$payload")" = 'true' ]; then
    username=$(jq -r .source.username <<< "$payload")
    echo "  login $username" >> ~/.netrc
fi
if [ "$(jq -r '.source | has("password")' <<< "$payload")" = 'true' ]; then
    password=$(jq -r .source.password <<< "$payload")
    echo "  password $password" >> ~/.netrc
fi
if [ "$(jq -r '.source | has("ssl")' <<< "$payload")" = 'true' ]; then
    ssl=$(jq -r .source.ssl <<< "$payload")
    if [ "$ssl" = "false" ]; then
        url="http://$domain"
    else
        url="https://$domain"
    fi
else
    url="https://$domain"
fi
if [ "$(jq -r '.source | has("port")' <<< "$payload")" = 'true' ]; then
    port=$(jq -r .source.port <<< "$payload")
    url+=":$port"
fi
if [ "$(jq -r '.source | has("path")' <<< "$payload")" = 'true' ]; then
    path=$(jq -r .source.path <<< "$payload")
    url+="/$path/"
else
    url+="/"
fi
overwrite=$(jq -r .source.overwrite <<< "$payload") # It will be 'null' if it is not provided.
if [ "$(jq -r '.params | has("path")' <<< "$payload")" = 'true' ]; then
    path=$(jq -r .params.path <<< "$payload")
    url+="$path/"
fi
if [ "$(jq -r '.params | has("from")' <<< "$payload")" = 'true' ]; then
    from=/$(jq -r .params.from <<< "$payload")
fi
if [ "$(jq -r '.params | has("files")' <<< "$payload")" = 'true' ]; then
    mapfile -t files < <(jq -r '.params.files|.[]' <<< "$payload" | sort)
else
    files=()
fi
if [ "$(jq -r '.params | has("overwrite")' <<< "$payload")" = 'true' ]; then
    overwrite=$(jq -r .params.overwrite <<< "$payload")
fi

cd "$1/$from"
if [ "${#files[@]}" = 0 ]; then
    mapfile -t files < <(find . -type f | cut -c 3- | sort | sed 's/\\/\\\\/g')
    mapfile -t uploads < <(find . -type f | cut -c 3- | sort | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/.*/"&"/')
fi
size=$(du -shc "${files[@]}" | awk '{print $1}' | tail -n 1)

if [ "${#files[@]}" -gt 0 ]; then
    IFS=$'|' pattern="${files[*]}"
    if [ "$overwrite" = "false" ] && echo "ls" | cadaver "$url" | grep -P "${pattern}"; then
        echo "Some files have existed on $url."
        exit 1
    elif echo "echo help" | cadaver "$url" | grep "Connection to \`$domain' closed." >/dev/null 2>&1; then
        IFS=$' '
        echo "mput ${uploads[*]}" | cadaver "$url" | head -n -2
    else
        echo "Connection error."
        exit 1
    fi
fi

trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    printf '%s' "$var"
}

lines=()
while read -r line; do
    if [ -n "$line" ]; then
        lines+=("$(trim "$line")")
    fi
done < <(echo ls | cadaver "$url" | head -n -2)

IFS=$'\n'
echo "${lines[*]:2}" | sort
sha256=$(echo "${lines[*]:2}" | sort | sha256sum | awk '{print $1}')

folders=()
files=()
for line in "${lines[@]:2}"; do
    if [ "$(echo "$line" | awk '{print $1}')" = "Coll:" ]; then
        folders+=("$(echo "$line" | awk '{print $2}')")
    else
        files+=("$(echo "$line" | awk '{print $1}')")
    fi
done

IFS=$'\n'
json='{"version":{"digest":"'"sha256:$sha256"'","url":"'"$url"'"},"metadata":[{"name":"folder","value":"'"${folders[*]}"'"},{"name":"file","value":"'"${files[*]}"'"},{"name":"size","value":"'"$size"'"}]}'

jq -n "$json" >&3
